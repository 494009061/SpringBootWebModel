######################################
###spring datasource Druid
######################################
# 使用阿里的Druid连接池
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# 填写你数据库的url、登录名、密码和数据库名
spring.datasource.url=jdbc:mysql://localhost:3306/db_test?useSSL=false&characterEncoding=utf8
spring.datasource.username=root
##需要在配置 spring.datasource.druid.connectionProperties 以;号分割添加 config.decrypt=true
##生成密码 使用 druid提供的ConfigTools 工具类 生成 或 解密
spring.datasource.password=root
##连接池的配置信息
# 初始化大小，最小，最大
spring.datasource.druid.initial-size=5
spring.datasource.druid.min-idle=5
spring.datasource.druid.max-active=20
#连接检查回收功能建议测试阶段开启
#有时粗心的程序编写者在从连接池中获取连接使用后忘记了连接的关闭，
#这样连池的连接就会逐渐达到maxActive直至连接池无法提供服务。
#现代连接池一般提供一种“智能”的检查，但设置了removeAbandoned="true"时，\
#  当连接池连接数到达(getNumIdle() < 2) and (getNumActive() > getMaxActive() - 3)时便会启动连接回收，\
#  那种活动时间超过removeAbandonedTimeout="60"的连接将会被回收，\
#  同时如果logAbandoned="true"设置为true,程序在回收连接的同时会打印日志。\
#  removeAbandoned是连接池的高级功能，理论上这中配置不应该出现在实际的生产环境，\
#  因为有时应用程序执行长事务，可能这种情况下，会被连接池误回收，该种配置一般在程序测试阶段，\
#  为了定位连接泄漏的具体代码位置，被开启，生产环境中连接的关闭应该靠程序自己保证。
#spring.datasource.druid.logAbandoned="true"
#spring.datasource.druid.removeAbandoned="true"
#spring.datasource.druid.removeAbandonedTimeout="1800"

# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 开始空闲测试 间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 验证查询
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
#不开启 影响性能 获得连接测试 和返回连接测试
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.druid.filters=stat,wall
spring.datasource.druid.use-global-data-source-stat=true
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录 与 密码解密功能 config.decrypt=true
spring.datasource.druid.filter.config.enabled=true
spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

# 配置DruidStatFilter
# 是否启用StatFilter默认值true
spring.datasource.druid.web-stat-filter.enabled=true
spring.datasource.druid.web-stat-filter.url-pattern=/*
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
spring.datasource.druid.web-stat-filter.profile-enable=true

# StatViewServlet配置
#展示Druid的统计信息,StatViewServlet的用途包括：1.提供监控信息展示的html页面2.提供监控信息的JSON API
#是否启用StatViewServlet默认值true
spring.datasource.druid.stat-view-servlet.enabled=true
##配置DruidStatViewServlet
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
# 允许清空统计数据
spring.datasource.druid.stat-view-servlet.reset-enable=true
# 登录名
spring.datasource.druid.stat-view-servlet.login-username=admin
# 登录密码
spring.datasource.druid.stat-view-servlet.login-password=123456
# IP白名单(没有配置或者为空，则允许所有访问)
spring.datasource.druid.stat-view-servlet.allow=127.0.0.1
# IP黑名单 (存在共同时，deny优先于allow)
#spring.datasource.druid.stat-view-servlet.deny=